<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xslt/atom.xslt" ?>
<?xml-stylesheet type="text/css" href="/assets/css/atom.css" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>http://localhost:4000/</id>
	<title>Griffin CS</title>
	<updated>2022-12-12T14:28:27-07:00</updated>

	<subtitle>Logging the adventures and exploits of a classial school computer science program.</subtitle>

	
		
		<author>
			
				<name>mrk</name>
			
			
			
		</author>
	

	<link href="http://localhost:4000/atom.xml" rel="self" type="application/rss+xml" />
	<link href="http://localhost:4000/" rel="alternate" type="text/html" />

	<generator uri="http://jekyllrb.com" version="4.2.2">Jekyll</generator>

	
		<entry>
			<id>http://localhost:4000/ctf/magikarp-ground-mission/</id>
			<title>Problem Writeup: Magikarp Ground Mission - CTF 5</title>
			<link href="http://localhost:4000/ctf/magikarp-ground-mission/" rel="alternate" type="text/html" title="Problem Writeup: Magikarp Ground Mission - CTF 5" />
			<updated>2022-12-05T00:00:00-07:00</updated>

			
				
				<author>
					
						<name>mrk</name>
					
					
					
				</author>
			
			<summary>This problem introduces us to ssh and changing directories in Linux.</summary>
			<content type="html" xml:base="http://localhost:4000/ctf/magikarp-ground-mission/">&lt;p&gt;Category: General Skills&lt;/p&gt;

&lt;h2 id=&quot;description-for-magikarp-ground-mission&quot;&gt;Description for Magikarp Ground Mission&lt;/h2&gt;

&lt;p&gt;“Do you know how to move between directories and read files in the shell? Start the container, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; to it, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; once connected to begin. Login via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctf-player&lt;/code&gt; with the password, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6dee9772&lt;/code&gt;.”&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; stands for Secure Shell, and it is a Linux tool that is similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netcat&lt;/code&gt; in function:  both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netcat&lt;/code&gt; allow us to connect remotely to another computer. The essential difference is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; allows us to make an encrypted connection (which is why it is called “secure shell”).&lt;/p&gt;

&lt;p&gt;Once we’ve established an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; connection, we have essentially used our computer to access a shell on another computer. To do this we’ll need 1) a user account on the host machine, 2) a password to that account so we can login remotely.&lt;/p&gt;

&lt;h2 id=&quot;opening-the-ssh-connection&quot;&gt;Opening the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; Connection&lt;/h2&gt;

&lt;p&gt;For this problem, we first need to click the blue “Start Instance” button in the problem box and wait a few seconds until the “Challenge Endpoint” information appears. Copy this command and paste it into your webshell. When asked if you want to continue connecting, type “yes” and hit enter. When asked for the password, copy and paste the password from the problem statement:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pimaker-picoctf@webshell:~$ ssh ctf-player@venus.picoctf.net -p 54085
The authenticity of host &apos;[venus.picoctf.net]:54085 ([3.131.124.143]:54085)&apos; can&apos;t be established.
ED25519 key fingerprint is SHA256:P1f6h95BrSVnJbm2AKhphfHHGEyAeThib/rN/AwKs24.
This host key is known by the following other names/addresses:
    ~/.ssh/known_hosts:1: [hashed name]
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added &apos;[venus.picoctf.net]:54085&apos; (ED25519) to the list of known hosts.
ctf-player@venus.picoctf.net&apos;s password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we enter the correct password, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; connection is completed and our command prompt changed to match the user account we have accessed–in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctf-player@pico-chall&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 5.4.0-1041-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the &apos;unminimize&apos; command.

The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

ctf-player@pico-chall$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;finding-the-flag&quot;&gt;Finding the Flag&lt;/h2&gt;

&lt;p&gt;Once connected, the first step is to explore our working directory (the directory we are currently in) by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;. We have two files in our directory;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;1of3.flag.txt  instructions-to-2of3.txt
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; to explore each file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;1of3.flag.txt 
picoCTF&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;xxsh_
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;instructions-to-2of3.txt 
Next, go to the root of all things, more succinctly &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first file contains what we might expect:  1/3 of the flag. The other file tells us to go to the root directory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;), where all the system files are stored. We can do this with the change directory command:  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd /&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;2of3.flag.txt  bin  boot  dev  etc  home  instructions-to-3of3.txt  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we list the files of the root directory, we see the usual directories found here on a Linux system. But we also have two new files to explore:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;2of3.flag.txt 
0ut_0f_&lt;span class=&quot;se&quot;&gt;\/\/&lt;/span&gt;4t3r_
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;instructions-to-3of3.txt 
Lastly, ctf-player, go home... more succinctly &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;~&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We found the second 1/3 of the flag, and need to change to the home directory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt;) with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ~&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;3of3.flag.txt  drop-in
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;3of3.flag.txt 
540e4e79&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
ctf-player@pico-chall&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we explore the final in the home directory, we have the last part of the flag. Combining all three of the pieces into one string gives us the final and correct flag:  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picoCTF{xxsh_0ut_0f_\/\/4t3r_540e4e79}&lt;/code&gt;.&lt;/p&gt;

</content>

			
				<category term="ctf" />
			
			
				<category term="blog" />
			
				<category term="content" />
			
				<category term="practice" />
			

			<published>2022-12-05T00:00:00-07:00</published>
		</entry>
	
		<entry>
			<id>http://localhost:4000/ctf/warmed-up-2warm/</id>
			<title>Problem Writeup: Let&apos;s Warm Up, Warmed Up, and 2Warm - CTF 4</title>
			<link href="http://localhost:4000/ctf/warmed-up-2warm/" rel="alternate" type="text/html" title="Problem Writeup: Let&apos;s Warm Up, Warmed Up, and 2Warm - CTF 4" />
			<updated>2022-11-07T00:00:00-07:00</updated>

			
				
				<author>
					
						<name>mrk</name>
					
					
					
				</author>
			
			<summary>This problem has us explore numbers in different bases (or encodings).</summary>
			<content type="html" xml:base="http://localhost:4000/ctf/warmed-up-2warm/">&lt;p&gt;Category: General Skills&lt;/p&gt;

&lt;h2 id=&quot;description-for-lets-warm-up&quot;&gt;Description for Let’s Warm Up&lt;/h2&gt;

&lt;p&gt;“If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?”&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;Since we’ll be converting bases for this problem, CyberChef will be our tool of choice. Remembering all numbers, letters, and symbols from the keyboard have a numerical value attached to them, and that ASCII is the “keyboard equivalent” of the numbers, we can use CyberChef to convert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x70&lt;/code&gt; from hexadecimal to ASCII with one recipe.&lt;/p&gt;

&lt;p&gt;First, we copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x70&lt;/code&gt; from the problem statement and paste it into the CyberChef input field. Then we search for the “From Hex” recipe and drag it into the Recipe field. As soon as we do that, we get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; in the Output field. Wrapping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; in the usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picoCTF{}&lt;/code&gt; gives us the correct flag.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;description-for-warmed-up&quot;&gt;Description for Warmed Up&lt;/h2&gt;

&lt;p&gt;“What is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x3D&lt;/code&gt; (base 16) in decimal (base 10)?”&lt;/p&gt;

&lt;h2 id=&quot;approach-1&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;Again, CyberChef is the tool we want to use for this problem. We use the same steps from the “Let’s Warm Up” problem, but there isn’t a “From Base16” option. However, there is a “From Base” recipe with an option to adjust the Radix (or “root”, another name for “base”). If we drag this recipe into the Recipe field and adjust the Radix to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;16&lt;/code&gt;, we get the right conversion in the output (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;61&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Wrapping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;61&lt;/code&gt; in the usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picoCTF{}&lt;/code&gt; gives us the correct flag.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;description-for-2warm&quot;&gt;Description for 2Warm&lt;/h2&gt;

&lt;p&gt;“Can you convert the number 42 (base 10) to binary (base 2)?”&lt;/p&gt;

&lt;h2 id=&quot;approach-2&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;Once again, we’ll use CyberChef for this problem. There is a “To Binary” recipe, but this returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; in binary and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; in binary, which isn’t what we want. The recipe we’re looking for is “To Base” with a Radix of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;. This gives us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;101010&lt;/code&gt;, which gives us the correct flag when we wrap it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;picoCTF{}&lt;/code&gt;.&lt;/p&gt;
</content>

			
				<category term="ctf" />
			
			
				<category term="blog" />
			
				<category term="content" />
			
				<category term="practice" />
			

			<published>2022-11-07T00:00:00-07:00</published>
		</entry>
	
		<entry>
			<id>http://localhost:4000/ctf/intro-netcat/</id>
			<title>Problem Writeup: Nice Netcat and Let&apos;s Warm Up - CTF 3</title>
			<link href="http://localhost:4000/ctf/intro-netcat/" rel="alternate" type="text/html" title="Problem Writeup: Nice Netcat and Let&apos;s Warm Up - CTF 3" />
			<updated>2022-11-01T00:00:00-06:00</updated>

			
				
				<author>
					
						<name>mrk</name>
					
					
					
				</author>
			
			<summary>This problem introduces us to the Linux tool `netcat`, a powerful tool for connecting to other computers, port scanning, and port listening.</summary>
			<content type="html" xml:base="http://localhost:4000/ctf/intro-netcat/">&lt;p&gt;Category: General Skills&lt;/p&gt;

&lt;h2 id=&quot;description-for-nice-netcat&quot;&gt;Description for Nice Netcat&lt;/h2&gt;

&lt;p&gt;“There is a nice program that you can talk to by using this command in a shell: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ nc mercury.picoctf.net 49039&lt;/code&gt;, but it doesn’t speak English…”&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;This problem introduces us to the Linux tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netcat&lt;/code&gt;, a powerful tool for connecting to other computers, port scanning, and port listening.&lt;/p&gt;

&lt;h3 id=&quot;running-netcat&quot;&gt;Running netcat&lt;/h3&gt;

&lt;p&gt;When we run the given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netcat&lt;/code&gt; command, we get a bunch of numbers:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pimaker-picoctf@webshell:~$ nc mercury.picoctf.net 49039
112 
105 
99 
111 
67 
84 
70 
123 
103 
48 
48 
100 
95 
107 
49 
116 
116 
121 
33 
95 
110 
49 
99 
51 
95 
107 
49 
116 
116 
121 
33 
95 
51 
100 
56 
52 
101 
100 
99 
56 
125 
10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The numbers don’t seem to follow any pattern, and the hints point us to solving another CTF problem “Let’s Warm Up.” Before looking at that problem, let’s save the output of this netcat connection to a file so we don’t have to run the netcat command again.&lt;/p&gt;

&lt;p&gt;To do this, press CTRL + C to end the current netcat connection, the hit the UP arrow to recall the last netcat command. Before pressing enter, we want to add ` &amp;gt; file.txt&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; to this command. This will tell the shell to save the netcat output to a file named &lt;/code&gt;file.txt` instead of printing it to the screen. When we run the command, it looks like nothing happens at first.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pimaker-picoctf@webshell:~$ nc mercury.picoctf.net 49039 &amp;gt; file.txt

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if we cancel the netcat connection and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat file.txt&lt;/code&gt;, we see that we now have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; with all the numbers in it. Let’s go to the “Let’s Warm Up” problem to see if it can help us figure out what to do with these numbers.&lt;/p&gt;

&lt;h3 id=&quot;description-for-lets-warm-up&quot;&gt;Description for Let’s Warm Up&lt;/h3&gt;

&lt;p&gt;“If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?”&lt;/p&gt;

&lt;h3 id=&quot;approach-1&quot;&gt;Approach&lt;/h3&gt;

&lt;p&gt;This looks like a pretty straightforward problem of translating a hexadecimal value into a keyboard (or ASCII) character. At the most basic level, computers represent all information in binary, a number system that uses only 1’s and 0’s. So every keyboard character is assigned a number–a number than can be expressed in the decimal system, the hexadecimal system, or the binary system.&lt;/p&gt;

&lt;p&gt;In this can we have “0x70”, a hexadecimal number, that stands for a certain keyboard character. We just need to translate this number to the right character. To do this, let’s use CyberChef.&lt;/p&gt;

&lt;p&gt;The recipe we need is “From Hex”, and the input is just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x70&lt;/code&gt;. This gives us the output &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;. If we wrap this letter in the normal CTF flag notation, we get “picoCTF{p}”, which is the correct answer to this problem.&lt;/p&gt;

&lt;h3 id=&quot;back-to-nice-netcat&quot;&gt;Back to Nice Netcat&lt;/h3&gt;

&lt;p&gt;Since “Let’s Warm Up” was the hint for the “Nice Netcat” problem, we should expect our list of numbers in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; to be a list of numbers representing keyboard characters. But instead of hexadecimal numbers, these are plain decimal numbers.&lt;/p&gt;

&lt;p&gt;So, let’s change our CyberChef recipe to “From Decimal” and paste the list of numbers in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; into the Output box in CyberChef. CyberChef automatically turns the new lines into spaces and gives us our flag.&lt;/p&gt;
</content>

			
				<category term="ctf" />
			
			
				<category term="blog" />
			
				<category term="content" />
			
				<category term="practice" />
			

			<published>2022-11-01T00:00:00-06:00</published>
		</entry>
	
		<entry>
			<id>http://localhost:4000/ctf/whats-a-netcat/</id>
			<title>Problem Writeup: What&apos;s a Netcat? - CTF 3</title>
			<link href="http://localhost:4000/ctf/whats-a-netcat/" rel="alternate" type="text/html" title="Problem Writeup: What&apos;s a Netcat? - CTF 3" />
			<updated>2022-10-31T00:00:00-06:00</updated>

			
				
				<author>
					
						<name>mrk</name>
					
					
					
				</author>
			
			<summary>This problem teaches us the time-saving power of the TAB key and gives us practice navigating a Linux filesystem.</summary>
			<content type="html" xml:base="http://localhost:4000/ctf/whats-a-netcat/">&lt;p&gt;Category: General Skills&lt;/p&gt;

&lt;h2 id=&quot;description-for-nice-netcat&quot;&gt;Description for Nice Netcat&lt;/h2&gt;

&lt;p&gt;“Using netcat (nc) is going to be pretty important. Can you connect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupiter.challenges.picoctf.org&lt;/code&gt; at port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;25103&lt;/code&gt; to get the flag?”&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;This problem introduces us to the Linux tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netcat&lt;/code&gt;, a powerful tool for connecting to other computers, port scanning, and port listening.&lt;/p&gt;

&lt;h3 id=&quot;running-netcat&quot;&gt;Running netcat&lt;/h3&gt;

&lt;p&gt;We can open the manual page (i.e., the documentation page) for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netcat&lt;/code&gt; by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man nc&lt;/code&gt; in the terminal. The page that appears tells us about netcat and–most importantly–how to run a basic netcat command in this format:  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc [destination] [port]&lt;/code&gt;. So for this problem, we run this command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pimaker-picoctf@webshell:~$ nc jupiter.challenges.picoctf.org 25103
You&apos;re on your way to becoming the net cat master
picoCTF{nEtCat_Mast3ry_d0c64587}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That was easy!&lt;/p&gt;

&lt;p&gt;Press CTRL + C to end the netcat connection.&lt;/p&gt;
</content>

			
				<category term="ctf" />
			
			
				<category term="blog" />
			
				<category term="content" />
			
				<category term="practice" />
			

			<published>2022-10-31T00:00:00-06:00</published>
		</entry>
	
		<entry>
			<id>http://localhost:4000/ctf/tab-tab-attack/</id>
			<title>Problem Writeup: Tab, Tab, Attack - CTF 2</title>
			<link href="http://localhost:4000/ctf/tab-tab-attack/" rel="alternate" type="text/html" title="Problem Writeup: Tab, Tab, Attack - CTF 2" />
			<updated>2022-10-25T00:00:00-06:00</updated>

			
				
				<author>
					
						<name>mrk</name>
					
					
					
				</author>
			
			<summary>This problem teaches us the time-saving power of the TAB key and gives us practice navigating a Linux filesystem.</summary>
			<content type="html" xml:base="http://localhost:4000/ctf/tab-tab-attack/">&lt;p&gt;Category: General Skills&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;“Using tabcomplete in the Terminal will add years to your life, esp. when dealing with long rambling directory structures and filenames: Addadshashanammu.zip”&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;This problem teaches us the time-saving power of the TAB key and gives us practice navigating a Linux filesystem (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;unzipping-the-file&quot;&gt;Unzipping the File&lt;/h3&gt;

&lt;p&gt;We begin by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; to download the file. Since it’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; file–a compressed file or folder(s)–we’ll begin by unzipping it with Linux’s built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip&lt;/code&gt; tool:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>

			
				<category term="ctf" />
			
			
				<category term="blog" />
			
				<category term="content" />
			
				<category term="practice" />
			

			<published>2022-10-25T00:00:00-06:00</published>
		</entry>
	
		<entry>
			<id>http://localhost:4000/ctf/mod-26/</id>
			<title>Problem Writeup: Mod 26 - CTF 2</title>
			<link href="http://localhost:4000/ctf/mod-26/" rel="alternate" type="text/html" title="Problem Writeup: Mod 26 - CTF 2" />
			<updated>2022-10-24T00:00:00-06:00</updated>

			
				
				<author>
					
						<name>mrk</name>
					
					
					
				</author>
			
			<summary>This problem introduces us to cryptography, specifically to the Caesar cipher.</summary>
			<content type="html" xml:base="http://localhost:4000/ctf/mod-26/">&lt;p&gt;Category: Cryptography&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;“Cryptography can be easy, do you know what ROT13 is? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cvpbPGS{arkg_gvzr_V&apos;yy_gel_2_ebhaqf_bs_ebg13_uJdSftmh}&lt;/code&gt;”&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;This problem introduces us to the world of cryptography. We will explore the ancient Caesar cipher and learn how to use CyberChef, a very powerful tool we will be using a lot in our CTF problems.&lt;/p&gt;

&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;/h3&gt;

&lt;p&gt;The problem description includes a string of seeming gibberish: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cvpbPGS{arkg_gvzr_V&apos;yy_gel_2_ebhaqf_bs_ebg13_uJdSftmh}&lt;/code&gt;. Looking at the string more closely, we notice that it looks to be in the general format of a CTF flag; in fact, the first six letters could be an encrypted form of “picoCTF”.&lt;/p&gt;

&lt;p&gt;Additionally, the problem description asks if we know what ROT13 is. A quick Google search tells us that ROT13 is a simple shift cipher, where every letter of the alphabet is shifted a certain number of places to the right to create an encoded message:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Input	ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
Output	NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s begin, then, by assuming that the given string is the CTF flag encrypted by ROT13.&lt;/p&gt;

&lt;h3 id=&quot;cyberchef&quot;&gt;Cyberchef&lt;/h3&gt;

&lt;p&gt;To decrypt the string, we can write out the message one character at a time–or we could use a computer to speed up this task. There are plenty of ROT13 decrypters online, but we will use a website called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cyberchef.com&lt;/code&gt; for this.&lt;/p&gt;

&lt;p&gt;Copy the encrypted string and go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cyberchef.com&lt;/code&gt;. Search for ROT13 in the Search bar on the CyberChef website, and drag the ROT 13 box into the Recipe space. Then paste the encrypted string into the Input box, and immediately the decrypted string appears in the Output box.&lt;/p&gt;

&lt;p&gt;You should bookmark the CyberChef website because we will return to it soon.&lt;/p&gt;
</content>

			
				<category term="ctf" />
			
			
				<category term="blog" />
			
				<category term="content" />
			
				<category term="practice" />
			

			<published>2022-10-24T00:00:00-06:00</published>
		</entry>
	
		<entry>
			<id>http://localhost:4000/ctf/obedient-cat/</id>
			<title>Problem Writeup: Obedient Cat - CTF 1</title>
			<link href="http://localhost:4000/ctf/obedient-cat/" rel="alternate" type="text/html" title="Problem Writeup: Obedient Cat - CTF 1" />
			<updated>2022-10-14T00:00:00-06:00</updated>

			
				
				<author>
					
						<name>mrk</name>
					
					
					
				</author>
			
			<summary>This is a very simple problem that introduces us to the webshell and to two important Linux commands:  `wget` and `cat`.</summary>
			<content type="html" xml:base="http://localhost:4000/ctf/obedient-cat/">&lt;p&gt;Category: General Skills&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;“This file has a flag in plain sight (aka “in-the-clear”). Download flag.”&lt;/p&gt;

&lt;h2 id=&quot;approach&quot;&gt;Approach&lt;/h2&gt;

&lt;p&gt;This is a very simple problem that introduces us to the webshell and to two important Linux commands:  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;wget&quot;&gt;wget&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; is a Linux tool for retrieving files from the internet (it is short for “web get”). Instead of downloading the file linked in the problem description, we will download it into the webshell. Though it is coming from a pretty trusted source, it’s good not to download the mystery file directly into our Downloads folder, if we can help it.&lt;/p&gt;

&lt;p&gt;To download the file, we first right-click on the link, then select “Copy Link Address”. This copies the URL to our clipboard. Then in the webshell, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;, a space, and paste in the URL we just copied:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pimaker-picoctf@webshell:~$ wget https://mercury.picoctf.net/static/a5683698ac318b47bd060cb786859f23/flag
--2022-10-17 22:37:09--  https://mercury.picoctf.net/static/a5683698ac318b47bd060cb786859f23/flag
Resolving mercury.picoctf.net (mercury.picoctf.net)... 18.189.209.142
Connecting to mercury.picoctf.net (mercury.picoctf.net)|18.189.209.142|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 34 [application/octet-stream]
Saving to: &apos;flag.1&apos;

flag              100%[==================&amp;gt;]      34  --.-KB/s    in 0s      

2022-10-17 22:37:10 (12.7 MB/s) - &apos;flag.1&apos; saved [34/34]

pimaker-picoctf@webshell:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ls&quot;&gt;ls&lt;/h3&gt;

&lt;p&gt;When we hit ENTER, a lot of things happen almost instantly. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt; connects to the URL we pasted, requests the file, then saves it to the webshell (in our user directory). To see the file that was downloaded, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; (short for “list”) in the command prompt:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pimaker-picoctf@webshell:~$ ls
README.txt  flag
pimaker-picoctf@webshell:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are currently two files in our user directory. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.txt&lt;/code&gt; file contains a lot of useful tips and information for using the pico webshell; you’ll be able to read it after finishing the next step.&lt;/p&gt;

&lt;h3 id=&quot;cat&quot;&gt;cat&lt;/h3&gt;

&lt;p&gt;To read the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; file, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt;, another Linux tool that shows us the contents of a file or allows us to add to the file (“cat” is short for “concatenate”, which means to join together). To see the contents of the file we just downloaded, we enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat flag&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pimaker-picoctf@webshell:~$ cat flag
picoCTF{s4n1ty_v3r1f13d_4a2b35fd}
pimaker-picoctf@webshell:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The weird string that displays is the flag we are looking for. All the flags in picoCTF are in this format. We copy and paste it into the problem box and click “Submit” to finish this problem.&lt;/p&gt;
</content>

			
				<category term="ctf" />
			
			
				<category term="blog" />
			
				<category term="content" />
			
				<category term="practice" />
			

			<published>2022-10-14T00:00:00-06:00</published>
		</entry>
	
</feed>